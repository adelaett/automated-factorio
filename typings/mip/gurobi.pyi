"""
This type stub file was generated by pyright.
"""

import numbers
import mip
from typing import List, Tuple
from os import environ
from mip import Column, Constr, LinExpr, Model, OptimizationStatus, SearchEmphasis, Solver, Var

"""
This type stub file was generated by pyright.
"""
logger = ...
ffi = ...
CData = ...
os_is_64_bit = ...
INF = ...
MAX_NAME_SIZE = ...
lib_path = ...
if "GUROBI_HOME" in environ:
    ...
if lib_path is None:
    ...
if lib_path is None:
    gurobipy_spec = ...
if lib_path is None:
    found = ...
else:
    found = ...
    grblib = ...
    GRBloadenv = ...
    GRBnewmodel = ...
    GRBfreeenv = ...
    GRBfreemodel = ...
    GRBaddvar = ...
    GRBaddconstr = ...
    GRBaddsos = ...
    GRBoptimize = ...
    GRBgetvarbyname = ...
    GRBsetdblattrarray = ...
    GRBsetcharattrlist = ...
    GRBsetdblattrlist = ...
    GRBwrite = ...
    GRBreadmodel = ...
    GRBread = ...
    GRBgetconstrbyname = ...
    GRBupdatemodel = ...
    GRBgetcharattrelement = ...
    GRBgetconstrs = ...
    GRBgetdblattrelement = ...
    GRBgetvars = ...
    GRBsetcharattrelement = ...
    GRBsetdblattrelement = ...
    GRBsetintattr = ...
    GRBsetintattrelement = ...
    GRBgetintattrelement = ...
    GRBsetdblattr = ...
    GRBgetintattr = ...
    GRBgetintparam = ...
    GRBsetintparam = ...
    GRBgetdblattr = ...
    GRBsetdblparam = ...
    GRBgetdblparam = ...
    GRBgetstrattrelement = ...
    GRBcbget = ...
    GRBcbsetparam = ...
    GRBcbsolution = ...
    GRBcbcut = ...
    GRBcblazy = ...
    GRBsetcallbackfunc = ...
    GRBdelvars = ...
    GRBdelconstrs = ...
    GRBgetenv = ...
    GRBgetstrattr = ...
    GRBsetstrattr = ...
    GRBgetdblattrarray = ...
    GRBreset = ...
    GRB_CB_MIPSOL = ...
    GRB_CB_MIPNODE = ...
    GRB_CB_PRE_COLDEL = ...
    GRB_CB_PRE_ROWDEL = ...
    GRB_CB_PRE_SENCHG = ...
    GRB_CB_PRE_BNDCHG = ...
    GRB_CB_PRE_COECHG = ...
    GRB_CB_SPX_ITRCNT = ...
    GRB_CB_SPX_OBJVAL = ...
    GRB_CB_SPX_PRIMINF = ...
    GRB_CB_SPX_DUALINF = ...
    GRB_CB_SPX_ISPERT = ...
    GRB_CB_MIP_OBJBST = ...
    GRB_CB_MIP_OBJBND = ...
    GRB_CB_MIP_NODCNT = ...
    GRB_CB_MIP_SOLCNT = ...
    GRB_CB_MIP_CUTCNT = ...
    GRB_CB_MIP_NODLFT = ...
    GRB_CB_MIP_ITRCNT = ...
    GRB_CB_MIPSOL_SOL = ...
    GRB_CB_MIPSOL_OBJ = ...
    GRB_CB_MIPSOL_OBJBST = ...
    GRB_CB_MIPSOL_OBJBND = ...
    GRB_CB_MIPSOL_NODCNT = ...
    GRB_CB_MIPSOL_SOLCNT = ...
    GRB_CB_MIPNODE_STATUS = ...
    GRB_CB_MIPNODE_REL = ...
    GRB_CB_MIPNODE_OBJBST = ...
    GRB_CB_MIPNODE_OBJBND = ...
    GRB_CB_MIPNODE_NODCNT = ...
    GRB_CB_MIPNODE_SOLCNT = ...
    GRB_CB_MSG_STRING = ...
    GRB_CB_RUNTIME = ...
    GRB_OPTIMAL = ...
class SolverGurobi(Solver):
    def __init__(self, model: Model, name: str, sense: str, modelp: CData = ...) -> None:
        """modelp should be informed if a model should not be created,
        but only allow access to an existing one"""
        ...
    
    def __del__(self):
        ...
    
    def add_var(self, obj: float = ..., lb: float = ..., ub: float = ..., var_type: str = ..., column: Column = ..., name: str = ...):
        ...
    
    def add_cut(self, lin_expr: LinExpr):
        ...
    
    def add_constr(self, lin_expr: LinExpr, name: str = ...):
        ...
    
    def add_lazy_constr(self: Solver, lin_expr: LinExpr):
        ...
    
    def add_sos(self, sos: List[Tuple[Var, float]], sos_type: int):
        ...
    
    def get_objective_bound(self) -> float:
        ...
    
    def get_objective(self) -> LinExpr:
        ...
    
    def get_objective_const(self) -> float:
        ...
    
    def relax(self):
        ...
    
    def get_max_seconds(self) -> float:
        ...
    
    def set_max_seconds(self, max_seconds: float):
        ...
    
    def get_max_solutions(self) -> int:
        ...
    
    def set_max_solutions(self, max_solutions: int):
        ...
    
    def get_max_nodes(self) -> int:
        ...
    
    def set_max_nodes(self, max_nodes: int):
        ...
    
    def set_num_threads(self, threads: int):
        ...
    
    def optimize(self, relax: bool = ...) -> OptimizationStatus:
        ...
    
    def get_objective_sense(self) -> str:
        ...
    
    def set_objective_sense(self, sense: str):
        ...
    
    def get_num_solutions(self) -> int:
        ...
    
    def var_get_xi(self, var: Var, i: int) -> float:
        ...
    
    def var_get_index(self, name: str) -> int:
        ...
    
    def get_objective_value_i(self, i: int) -> float:
        ...
    
    def get_objective_value(self) -> float:
        ...
    
    def get_log(self) -> List[Tuple[float, Tuple[float, float]]]:
        ...
    
    def set_processing_limits(self: Solver, max_time: numbers.Real = ..., max_nodes: int = ..., max_sol: int = ..., max_seconds_same_incumbent: float = ..., max_nodes_same_incumbent: int = ...):
        ...
    
    def set_objective(self, lin_expr: LinExpr, sense: str = ...) -> None:
        ...
    
    def set_objective_const(self, const: float) -> None:
        ...
    
    def set_start(self, start: List[Tuple[Var, float]]) -> None:
        ...
    
    def flush_cols(self):
        """should be called in methods that require updated column
        information, e.g. when adding a new constraint"""
        ...
    
    def flush_rows(self):
        """should be called in methods that require updated row
        information, e.g. when adding a new column"""
        ...
    
    def write(self, file_path: str) -> None:
        ...
    
    def read(self, file_path: str) -> None:
        ...
    
    def num_cols(self) -> int:
        ...
    
    def num_int(self) -> int:
        ...
    
    def num_rows(self) -> int:
        ...
    
    def num_nz(self) -> int:
        ...
    
    def get_cutoff(self) -> float:
        ...
    
    def set_cutoff(self, cutoff: float):
        ...
    
    def get_mip_gap_abs(self) -> float:
        ...
    
    def set_mip_gap_abs(self, allowable_gap: float):
        ...
    
    def get_mip_gap(self) -> float:
        ...
    
    def set_mip_gap(self, allowable_ratio_gap: float):
        ...
    
    def get_verbose(self) -> int:
        ...
    
    def set_verbose(self, verbose: int):
        ...
    
    def constr_get_expr(self, constr: Constr) -> LinExpr:
        ...
    
    def constr_get_rhs(self, idx: int) -> float:
        ...
    
    def constr_set_rhs(self, idx: int, rhs: float):
        ...
    
    def constr_get_name(self, idx: int) -> str:
        ...
    
    def constr_set_expr(self, constr: Constr, value: LinExpr) -> LinExpr:
        ...
    
    def constr_get_slack(self, constr: Constr) -> float:
        ...
    
    def constr_get_pi(self, constr: Constr) -> float:
        ...
    
    def constr_get_index(self, name: str) -> int:
        ...
    
    def remove_constrs(self, constrsList: List[int]):
        ...
    
    def var_get_branch_priority(self: Solver, var: mip.Var) -> numbers.Real:
        ...
    
    def var_set_branch_priority(self: Solver, var: mip.Var, value: numbers.Real):
        ...
    
    def var_get_lb(self, var: Var) -> float:
        ...
    
    def var_set_lb(self, var: Var, value: float) -> None:
        ...
    
    def var_get_ub(self, var: Var) -> float:
        ...
    
    def var_set_ub(self, var: Var, value: float) -> None:
        ...
    
    def var_get_obj(self, var: Var) -> float:
        ...
    
    def var_set_obj(self, var: Var, value: float) -> None:
        ...
    
    def var_get_var_type(self, var: Var) -> str:
        ...
    
    def var_set_var_type(self, var: Var, value: str) -> None:
        ...
    
    def var_get_column(self, var: Var) -> Column:
        ...
    
    def var_set_column(self, var: Var, value: Column):
        ...
    
    def var_get_rc(self, var: Var) -> float:
        ...
    
    def var_get_x(self, var: Var) -> float:
        ...
    
    def var_get_name(self, idx: int) -> str:
        ...
    
    def remove_vars(self, varsList: List[int]):
        ...
    
    def get_emphasis(self) -> SearchEmphasis:
        ...
    
    def set_emphasis(self, emph: SearchEmphasis):
        ...
    
    def update(self):
        ...
    
    def set_char_attr_element(self, name: str, index: int, value: str):
        ...
    
    def get_dbl_attr_element(self, name: str, index: int) -> float:
        ...
    
    def set_dbl_attr_element(self, name: str, index: int, value: float):
        ...
    
    def get_int_attr_element(self, name: str, index: int) -> float:
        ...
    
    def set_int_attr_element(self, name: str, index: int, value: int):
        ...
    
    def set_int_attr(self, name: str, value: int):
        ...
    
    def set_dbl_attr(self, name: str, value: float):
        ...
    
    def get_int_attr(self, name: str) -> int:
        ...
    
    def get_int_param(self, name: str) -> int:
        ...
    
    def set_int_param(self, name: str, value: int):
        ...
    
    def get_dbl_attr(self, attr: str) -> float:
        ...
    
    def set_dbl_param(self, param: str, value: float):
        ...
    
    def get_dbl_param(self, param: str) -> float:
        ...
    
    def get_str_attr_element(self, attr: str, index: int) -> str:
        ...
    
    def get_problem_name(self) -> str:
        ...
    
    def set_problem_name(self, name: str):
        ...
    
    def get_pump_passes(self) -> int:
        ...
    
    def set_pump_passes(self, passes: int):
        ...
    
    def reset(self):
        ...
    


class SolverGurobiCB(SolverGurobi):
    """Just like previous solver, but aware that
    running in the callback, so some methods
    should be different (e.g. to get the frac sol)"""
    def __init__(self, model: Model, grb_model: CData = ..., cb_data: CData = ..., where: int = ...) -> None:
        ...
    
    def add_cut(self, lin_expr: LinExpr):
        ...
    
    def add_constr(self, lin_expr: LinExpr, name: str = ...):
        ...
    
    def add_lazy_constr(self, lin_expr: LinExpr):
        ...
    
    def get_status(self):
        ...
    
    def var_get_x(self, var: Var):
        ...
    
    def __del__(self):
        ...
    


class ModelGurobiCB(Model):
    def __init__(self, grb_model: CData = ..., cb_data: CData = ..., where: int = ...) -> None:
        ...
    
    def add_constr(self, lin_expr: LinExpr, name: str = ...) -> Constr:
        ...
    


