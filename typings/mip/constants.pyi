"""
This type stub file was generated by pyright.
"""

from enum import Enum

"""
This type stub file was generated by pyright.
"""
ffi = ...
EPS = ...
INF = ...
INT_MAX = ...
EQUAL = ...
LESS_OR_EQUAL = ...
GREATER_OR_EQUAL = ...
MIN = ...
MAX = ...
MINIMIZE = ...
MAXIMIZE = ...
CBC = ...
CPX = ...
CPLEX = ...
GRB = ...
GUROBI = ...
SCIP = ...
BINARY = ...
CONTINUOUS = ...
INTEGER = ...
class CutType(Enum):
    """Types of cuts that can be generated. Each cut type is an implementation
    in the `COIN-OR Cut Generation Library <https://github.com/coin-or/Cgl>`_.
    For some cut types multiple implementations are available. Sometimes these
    implementations were designed with different objectives: for the generation
    of Gomory cutting planes, for example, the GMI cuts are focused on numerical
    stability, while Forrest's implementation (GOMORY) is more integrated into
    the CBC code."""
    PROBING = ...
    GOMORY = ...
    GMI = ...
    RED_SPLIT = ...
    RED_SPLIT_G = ...
    FLOW_COVER = ...
    MIR = ...
    TWO_MIR = ...
    LATWO_MIR = ...
    LIFT_AND_PROJECT = ...
    RESIDUAL_CAPACITY = ...
    ZERO_HALF = ...
    CLIQUE = ...
    ODD_WHEEL = ...
    KNAPSACK_COVER = ...


class OptimizationStatus(Enum):
    """Status of the optimization"""
    ERROR = ...
    OPTIMAL = ...
    INFEASIBLE = ...
    UNBOUNDED = ...
    FEASIBLE = ...
    INT_INFEASIBLE = ...
    NO_SOLUTION_FOUND = ...
    LOADED = ...
    CUTOFF = ...
    OTHER = ...


class SearchEmphasis(Enum):
    DEFAULT = ...
    FEASIBILITY = ...
    OPTIMALITY = ...


class LP_Method(Enum):
    """Different methods to solve the linear programming problem."""
    AUTO = ...
    DUAL = ...
    PRIMAL = ...
    BARRIER = ...
    BARRIERNOCROSS = ...


class ConstraintPriority(Enum):
    """A constraint categorization level that can be used for the relaxation algorithms"""
    VERY_LOW_PRIORITY = ...
    LOW_PRIORITY = ...
    NORMAL_PRIORITY = ...
    MID_PRIORITY = ...
    HIGH_PRIORITY = ...
    VERY_HIGH_PRIORITY = ...
    MANDATORY = ...
    def __lt__(self, other) -> bool:
        ...
    


