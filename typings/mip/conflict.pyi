"""
This type stub file was generated by pyright.
"""

import mip
import mip.constants
from enum import Enum

"""
This type stub file was generated by pyright.
"""
logger = ...
class IISFinderAlgorithm(Enum):
    DELETION_FILTER = ...
    ADDITIVE_ALGORITHM = ...


class ConflictFinder:
    """This class groups some IIS (Irreducible Infeasible Set) search algorithms"""
    def __init__(self, model: mip.Model) -> None:
        ...
    
    def find_iis(self, method: IISFinderAlgorithm = ...) -> mip.ConstrList:
        """main method to find an IIS, this method is just a grouping of the other implementations

        Args:
            model (mip.Model): Infeasible model where to find the IIS
            method (str, optional): name of the method to use ["deletion-filter", "additive_algorithm"]. Defaults to 'deletion-filter".

        Returns:
            mip.ConstrList: IIS constraint list
        """
        ...
    
    def deletion_filter(self) -> mip.ConstrList:
        """deletion filter algorithm for search an IIS

        Args:
            model (mip.Model): Infeasible model

        Returns:
            mip.ConstrList: IIS
        """
        ...
    
    def additive_algorithm(self) -> mip.ConstrList:
        """Additive algorithm to find an IIS

        Returns:
            mip.ConstrList: IIS
        """
        ...
    
    def deletion_filter_milp_ir_lc_bd(self) -> mip.ConstrList:
        """Integer deletion filter algorithm (milp_ir_lc_bd)

        Raises:
            NotImplementedError: [description]

        Returns:
            mip.ConstrList: [description]
        """
        ...
    
    def deletion_filter_milp_lc_ir_bd(self) -> mip.ConstrList:
        ...
    


class ConflictRelaxer:
    def __init__(self, model: mip.Model) -> None:
        ...
    
    @property
    def slack_by_crt(self) -> dict:
        ...
    
    def hierarchy_relaxer(self, relaxer_objective: str = ..., default_priority: mip.constants.ConstraintPriority = ...) -> mip.Model:
        """hierarchy relaxer algorithm, it's gonna find a IIS and then relax it using the objective function defined (`relaxer_objective`) and then update the model
        with the relaxed constraints. This process runs until there's not more IIS on the model.

        Args:
            relaxer_objective (str, optional): objective function of the relaxer model (IIS relaxer model). Defaults to 'min_abs_slack_val'.
            default_priority (ConstraintPriority, optional): If a constraint does not have a supported substring priority in the name, it will assign a default priority.
                                                             Defaults to ConstraintPriority.MANDATORY.

        Raises:
            Exception: [description]

        Returns:
            mip.Model: relaxed model
        """
        ...
    
    @classmethod
    def relax_iis(cls, iis: mip.ConstrList, relaxer_objective: str = ...) -> dict:
        """This function is the sub module that finds the optimum relaxation for an IIS, given a crt priority mapping and a objective function

        Args:
            iis (mip.ConstrList): IIS constraint list
            relaxer_objective (str, optional): objective function to use when relaxing. Defaults to 'min_abs_slack_val'.

        Returns:
            dict: a slack variable dictionary with the value of the {constraint_name:slack.value} pair to be added to each constraint in order to make the IIS feasible
        """
        ...
    
    @classmethod
    def relax_constraints(cls, relaxed_model: mip.Model, slack_dict: dict) -> mip.Model:
        """this method creates a modification of the model `relaxed_model` where all the constraints in the slack_dict are
        modified in order to add the slack values to make the IIS disappear

        Args:
            relaxed_model (mip.Model): model to relax
            slack_dict (dict): pairs {constraint_name: slack_var.value}

        Returns:
            mip.Model: a modification of the original model where all the constraints are modified with the slack values
        """
        ...
    


