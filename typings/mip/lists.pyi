"""
This type stub file was generated by pyright.
"""

import numbers
import mip
from collections.abc import Sequence
from typing import List

"""
This type stub file was generated by pyright.
"""
class VarList(Sequence):
    """List of model variables (:class:`~mip.Var`).

    The number of variables of a model :code:`m` can be queried as
    :code:`len(m.vars)` or as :code:`m.num_cols`.

    Specific variables can be retrieved by their indices or names.
    For example, to print the lower bounds of the first
    variable or of a varible named :code:`z`, you can use, respectively:

    .. code-block:: python

        print(m.vars[0].lb)

    .. code-block:: python

        print(m.vars['z'].lb)
    """
    def __init__(self: VarList, model: mip.Model) -> None:
        ...
    
    def add(self, name: str = ..., lb: numbers.Real = ..., ub: numbers.Real = ..., obj: numbers.Real = ..., var_type: str = ..., column: mip.Column = ...) -> mip.Var:
        ...
    
    def __getitem__(self: VarList, key):
        ...
    
    def __len__(self) -> int:
        ...
    
    def update_vars(self: VarList, n_vars: int):
        ...
    
    def remove(self: VarList, vars: List[mip.Var]):
        ...
    


class VVarList(Sequence):
    def __init__(self: VVarList, model: mip.Model, start: int = ..., end: int = ...) -> None:
        ...
    
    def add(self: VVarList, name: str = ..., lb: numbers.Real = ..., ub: numbers.Real = ..., obj: numbers.Real = ..., var_type: str = ..., column: mip.Column = ...) -> mip.Var:
        ...
    
    def __getitem__(self: VVarList, key):
        ...
    
    def __len__(self: VVarList) -> int:
        ...
    


class ConstrList(Sequence):
    """List of problem constraints"""
    def __init__(self: ConstrList, model: mip.Model) -> None:
        ...
    
    def __getitem__(self: ConstrList, key):
        ...
    
    def add(self, lin_expr: mip.LinExpr, name: str = ..., priority: mip.constants.ConstraintPriority = ...) -> mip.Constr:
        ...
    
    def __len__(self) -> int:
        ...
    
    def remove(self: ConstrList, constrs: List[mip.Constr]):
        ...
    
    def update_constrs(self: ConstrList, n_constrs: int):
        ...
    


class VConstrList(Sequence):
    def __init__(self: VConstrList, model: mip.Model) -> None:
        ...
    
    def __getitem__(self: VConstrList, key):
        ...
    
    def __len__(self) -> int:
        ...
    


class EmptyVarSol(Sequence):
    """A list that always returns None when acessed, just to be used
    when no solution is available."""
    def __init__(self: EmptyVarSol, model: mip.Model) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __getitem__(self: EmptyVarSol, key):
        ...
    


class EmptyRowSol(Sequence):
    """A list that always returns None when acessed, just to be used
    when no solution is available."""
    def __init__(self: EmptyRowSol, model: mip.Model) -> None:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __getitem__(self: EmptyRowSol, key):
        ...
    


